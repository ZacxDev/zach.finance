package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"time"

	"github.com/ZacxDev/zach.finance/internal/model"
	"github.com/ZacxDev/zach.finance/internal/volatility"
)

// Volatility is the resolver for the volatility field.
func (r *queryResolver) GetVolatility(ctx context.Context, ticker string, start int, end int, interval string) (*model.Volatility, error) {
	s := time.Unix(int64(start), 0)
	e := time.Unix(int64(end), 0)

	standardDeviation, volatilityByInterval, err := volatility.GetVolatility(ticker, s, e, interval)
	if err != nil {
		return nil, err
	}

	res := &model.Volatility{
		VolatilityByInterval: volatilityByInterval,
		StandardDeviation:    standardDeviation,
	}

	return res, nil
}

// StartTimestamp is the resolver for the startTimestamp field.
func (r *volatilityForIntervalResolver) StartTimestamp(ctx context.Context, obj *model.VolatilityForInterval) (int, error) {
	if obj != nil {
		return int(obj.StartTimestamp.Unix()), nil
	}
	return 0, nil
}

// EndTimestamp is the resolver for the endTimestamp field.
func (r *volatilityForIntervalResolver) EndTimestamp(ctx context.Context, obj *model.VolatilityForInterval) (int, error) {
	if obj != nil {
		return int(obj.EndTimestamp.Unix()), nil
	}
	return 0, nil
}

// VolatilityForInterval returns VolatilityForIntervalResolver implementation.
func (r *Resolver) VolatilityForInterval() VolatilityForIntervalResolver {
	return &volatilityForIntervalResolver{r}
}

type volatilityForIntervalResolver struct{ *Resolver }
